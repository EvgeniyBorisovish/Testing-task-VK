[{"D:\\animation\\my-app\\my-app\\src\\index.js":"1","D:\\animation\\my-app\\my-app\\src\\reducers\\index.js":"2","D:\\animation\\my-app\\my-app\\src\\components\\app\\index.js":"3","D:\\animation\\my-app\\my-app\\src\\reducers\\task.js":"4","D:\\animation\\my-app\\my-app\\src\\reducers\\microtask.js":"5","D:\\animation\\my-app\\my-app\\src\\components\\app\\App.js":"6","D:\\animation\\my-app\\my-app\\src\\constants\\actions.js":"7","D:\\animation\\my-app\\my-app\\src\\components\\border\\index.js":"8","D:\\animation\\my-app\\my-app\\src\\components\\border\\Border.js":"9","D:\\animation\\my-app\\my-app\\src\\components\\addtask\\index.js":"10","D:\\animation\\my-app\\my-app\\src\\components\\task\\index.js":"11","D:\\animation\\my-app\\my-app\\src\\components\\addtask\\Addtask.js":"12","D:\\animation\\my-app\\my-app\\src\\components\\task\\Task.js":"13","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\index.js":"14","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\Microtask.js":"15","D:\\animation\\my-app\\my-app\\src\\App.js":"16"},{"size":508,"mtime":1610909685535,"results":"17","hashOfConfig":"18"},{"size":179,"mtime":1609179315492,"results":"19","hashOfConfig":"18"},{"size":71,"mtime":1608983242753,"results":"20","hashOfConfig":"18"},{"size":1075,"mtime":1611064145223,"results":"21","hashOfConfig":"18"},{"size":2291,"mtime":1611215091969,"results":"22","hashOfConfig":"18"},{"size":163,"mtime":1609928182255,"results":"23","hashOfConfig":"18"},{"size":296,"mtime":1608983076780,"results":"24","hashOfConfig":"18"},{"size":83,"mtime":1609179554987,"results":"25","hashOfConfig":"18"},{"size":4141,"mtime":1611172651578,"results":"26","hashOfConfig":"18"},{"size":87,"mtime":1608983079885,"results":"27","hashOfConfig":"18"},{"size":75,"mtime":1609738927947,"results":"28","hashOfConfig":"18"},{"size":1409,"mtime":1611129790774,"results":"29","hashOfConfig":"18"},{"size":2149,"mtime":1611130044655,"results":"30","hashOfConfig":"18"},{"size":95,"mtime":1609762154107,"results":"31","hashOfConfig":"18"},{"size":995,"mtime":1611088961859,"results":"32","hashOfConfig":"18"},{"size":8699,"mtime":1610479608791,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1a7igb4",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"D:\\animation\\my-app\\my-app\\src\\index.js",[],["72","73"],"D:\\animation\\my-app\\my-app\\src\\reducers\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\app\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\reducers\\task.js",[],"D:\\animation\\my-app\\my-app\\src\\reducers\\microtask.js",["74"],"D:\\animation\\my-app\\my-app\\src\\components\\app\\App.js",[],"D:\\animation\\my-app\\my-app\\src\\constants\\actions.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\border\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\border\\Border.js",["75"],"\nimport React from \"react\";\nimport { useSelector,useDispatch } from 'react-redux';\nimport {nanoid} from 'nanoid'\nimport {ADD_TASK,CHANGE_PLACE_MT} from '../../constants/actions'\nimport  Addtask  from \"../addtask\";\nimport Task from '../task'\n\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\n\n\n\nexport const Border = ()=>{\n\n  const dispath = useDispatch()\n\n  const tasks = useSelector((state)=>state.task.tasks_arr)\n  console.log(tasks)\n  const addTask = (actionType,value)=>{\n   value = value.trim()\n   if (value===\"\" || actionType.trim()===\"\"){return}\n   dispath({type:actionType,payload:{caption:value,id:nanoid()}})\n  }\n\n\n  const reorder = (list, startIndex, endIndex) => {\n   const result = Array.from(list);\n   const [removed] = result.splice(startIndex, 1);\n   result.splice(endIndex, 0, removed);\n\n   return result;\n};\n\n/**\n* Moves an item from one list to another list.\n*/\nconst move = (source, destination, droppableSource, droppableDestination) => {\n   const sourceClone = Array.from(source);\n   const destClone = Array.from(destination);\n   const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n   destClone.splice(droppableDestination.index, 0, removed);\n\n   const result = {};\n   result[droppableSource.droppableId] = sourceClone;\n   result[droppableDestination.droppableId] = destClone;\n\n   return result;\n};\n\nconst onDragEnd = (result) => {\n\n   const { source, destination } = result;\n\n   if (!destination) { return; }\n   \n   dispath({type:CHANGE_PLACE_MT,payload:{source:source,destination:destination}})\n\n   return\n\n\n\n   if (source.droppableId === destination.droppableId) {\n        //dispath({type:CHANGE_PLACE_MT,payload:{source:source.index,destination:destination.index}})\n\n\n        dispath({type:CHANGE_PLACE_MT,payload:{source:source,destination:destination}})\n\n    return\n\n        console.log( source , destination )\n\n       const items = reorder(\n           this.getList(source.droppableId),\n           source.index,\n           destination.index\n       );\n\n       let state = { items };\n\n       if (source.droppableId === 'droppable2') {\n           state = { selected: items };\n       }\n       if (source.droppableId === 'droppable3') {\n           state = { selected2: items };\n       }\n       this.setState(state);\n   } else {\n\n\n    console.log(source , destination)\n        return\n\n\n       const result = move(\n           this.getList(source.droppableId),\n           this.getList(destination.droppableId),\n           source,\n           destination\n       );\n\n  \n  \n\n       let changeObj = {};\n\n       if (result.droppable) {\n           changeObj.items = result.droppable;\n       }\n       if (result.droppable2) {\n           changeObj.selected = result.droppable2;\n       }\n       if (result.droppable3) {\n           changeObj.selected2 = result.droppable3;\n       }\n\n   }\n};\n\n\n   return (\n    <div className=\"border\">\n   <DragDropContext onDragEnd={onDragEnd}>\n            \n               {tasks.map(\n                  \n                     (id_task,index)=>{\n                         \n                         return(\n                           <Droppable type=\"CARDS\" droppableId={String(id_task)} key={nanoid()}>\n                           {\n                              (provided) => (\n\n                              <div  className=\"task_conteiner\" \n                                ref={provided.innerRef} \n                                key={nanoid()}>\n\n                                  <Task id_task={id_task} key={nanoid()} provided={provided}/>\n                                \n                                  </div>\n                              )\n                             \n                           }\n                            \n                           </Droppable>\n                         )\n                        }\n                        \n                        )\n               }\n              \n   </DragDropContext>\n   <div className=\"task_conteiner\"><Addtask getAction={addTask.bind(null,ADD_TASK)} textPlaceholder={\"Введите текст  макрозадача\"}/></div>\n   </div>\n   );\n   \n}\n// <div className=\"task_conteiner\"><Addtask/></div>\n","D:\\animation\\my-app\\my-app\\src\\components\\addtask\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\task\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\addtask\\Addtask.js",["76","77"],"\nimport React,{useState,useRef} from 'react'\n\nimport addSvg from \"../../images/addBtnTask.svg\";\n\nimport clearSvg from \"../../images/clear.svg\";\n\nexport const Addtask = ({getAction,textPlaceholder})=>{\n\nconst [inputBlock,setInputBlock] = useState(false)\nconst refEl =  useRef(null)\n\n\nconst hideShowStartTask = (value)=>{\n    setInputBlock(value)\n}\n\nconst exuteAction = ()=>{\n\n    getAction(refEl.current.value)\n\n    refEl.current.value=\"\";\n\n    hideShowStartTask(false)\n}\n\n   return (\n   <div className=\"addtask\">\n\n        {\n            !inputBlock && (\n            <div className=\"addtaskFirstBtn\" onClick={hideShowStartTask.bind(null,true)}><img className=\"addSvg-img\" src={addSvg}></img><span>Добавить еще одну карточку</span></div>\n            )\n        }\n        {\n            inputBlock && (\n            <div className=\"taskInput\">\n                <p><textarea ref={refEl} className=\"taskInput__TextArea\" placeholder={textPlaceholder}></textarea></p>\n                <div className=\"task__btns_area\">\n                        <div  className=\"task__btn_add\" onClick={exuteAction}>Добавить карточку</div>\n                        <div className=\"task__btn_X\" onClick={hideShowStartTask.bind(null,false)}><img className=\"add-form__bottom-clear\" src={clearSvg}></img></div>      \n                </div>\n            </div>)\n            \n        }\n   \n    </div>);\n    \n}\n","D:\\animation\\my-app\\my-app\\src\\components\\task\\Task.js",["78"],"\nimport React from 'react'\nimport {useSelector,useDispatch} from 'react-redux'\nimport {ADD_MICRO_TASK,DELETE_TASK} from '../../constants/actions'\nimport {nanoid} from 'nanoid'\nimport Microtask from '../microtask'\nimport  Addtask  from \"../addtask\";\n\nimport clearSvg from \"../../images/clear.svg\";\n\nexport const Task = ({id_task,provided})=>{\nconst dispath = useDispatch()\nconst data_obj = useSelector((state)=>(state.task.tasks_obj[id_task]))\nconst tasks_arr = useSelector((state)=>(Object.values(state.microtask.tasks_obj).filter((task)=>(task.id_task===id_task))))\n\nconst addMicroTaskHandler = (actionType,value)=>{\n  value = value.trim()\n  if (value===\"\" || actionType.trim()===\"\"){return}\n  dispath({type:actionType,payload:{text:value,id:nanoid(),id_task:id_task}})\n}\nconst handDelTask = ()=>{\n  dispath({type:DELETE_TASK,payload:id_task})\n}\n\nreturn (<div className=\"task\">\n        <div className=\"task_header\">\n          \n          <b className=\"task__captionTask\">{data_obj.caption}</b>\n          <div className=\"task__btnClose\" onClick={handDelTask} ><img src={clearSvg}></img></div>\n        </div>\n        <div className=\"task__microtasks\">\n              {tasks_arr.map(({id,text,id_task},index)=>{\n                return(\n                    /*<Draggable\n                      key={id}\n                      draggableId={ String(id) }\n                      index={index}>\n                        {\n                          (provided ) => (*/\n                            /*<Microtask id={id} text={text} key={String(id)} provided={provided} \n                            />*/\n                            <Microtask id={id} text={text} key={String(id)} index={index}/>\n                            \n                  /*       )\n                        }\n                    </Draggable>*/\n                )\n                \n              })}\n        {provided.placeholder}\n        </div>\n        \n        <Addtask getAction={addMicroTaskHandler.bind(null,ADD_MICRO_TASK)} textPlaceholder={\"Введите текст  микрозадача\"}/>\n        </div>);\n     \n}\n//   <Addtask getAction={addMicroTaskHandler.bind(null,ADD_MICRO_TASK)}/>","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\microtask\\Microtask.js",["79"],"\nimport React from \"react\"\nimport {DELETE_MICRO_TASK} from \"../../constants/actions\"\nimport {useDispatch} from 'react-redux'\nimport { Draggable } from 'react-beautiful-dnd';\nimport clearSvg from \"../../images/clear.svg\";\nexport const Microtask = ({id,text,index})=>{\n  const dispath = useDispatch()\n  const handDelMicroTask = ()=>{\n    dispath({type:DELETE_MICRO_TASK,payload:id})\n  }\n  \n   return (\n  <Draggable\n          key={id}\n          draggableId={ String(id) }\n          index={index}>\n            {\n              (provided ) => (\n          <div className=\"microtask\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            >\n              <div className=\"microtask__text\">{text}</div>\n              <div className=\"microtask__btnClose\" onClick={handDelMicroTask} ><img className=\"microtask__btnClose-svg\" src={clearSvg}></img></div>\n          </div>\n              )\n              }\n  </Draggable>\n    );\n    \n}\n","D:\\animation\\my-app\\my-app\\src\\App.js",[],["80","81"],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":13},{"ruleId":"90","severity":1,"message":"91","line":64,"column":4,"nodeType":"92","messageId":"93","endLine":118,"endColumn":5},{"ruleId":"94","severity":1,"message":"95","line":32,"column":90,"nodeType":"96","endLine":32,"endColumn":131},{"ruleId":"94","severity":1,"message":"95","line":41,"column":99,"nodeType":"96","endLine":41,"endColumn":154},{"ruleId":"94","severity":1,"message":"95","line":29,"column":66,"nodeType":"96","endLine":29,"endColumn":86},{"ruleId":"94","severity":1,"message":"95","line":26,"column":80,"nodeType":"96","endLine":26,"endColumn":136},{"ruleId":"82","replacedBy":"97"},{"ruleId":"84","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'act' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","IfStatement","unreachableCode","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["99"],["100"],"no-global-assign","no-unsafe-negation"]