[{"D:\\animation\\my-app\\my-app\\src\\index.js":"1","D:\\animation\\my-app\\my-app\\src\\reducers\\index.js":"2","D:\\animation\\my-app\\my-app\\src\\components\\app\\index.js":"3","D:\\animation\\my-app\\my-app\\src\\reducers\\task.js":"4","D:\\animation\\my-app\\my-app\\src\\reducers\\microtask.js":"5","D:\\animation\\my-app\\my-app\\src\\components\\app\\App.js":"6","D:\\animation\\my-app\\my-app\\src\\constants\\actions.js":"7","D:\\animation\\my-app\\my-app\\src\\components\\border\\index.js":"8","D:\\animation\\my-app\\my-app\\src\\components\\border\\Border.js":"9","D:\\animation\\my-app\\my-app\\src\\components\\addtask\\index.js":"10","D:\\animation\\my-app\\my-app\\src\\components\\task\\index.js":"11","D:\\animation\\my-app\\my-app\\src\\components\\addtask\\Addtask.js":"12","D:\\animation\\my-app\\my-app\\src\\components\\task\\Task.js":"13","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\index.js":"14","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\Microtask.js":"15"},{"size":482,"mtime":1611237228909,"results":"16","hashOfConfig":"17"},{"size":179,"mtime":1609179315492,"results":"18","hashOfConfig":"17"},{"size":71,"mtime":1608983242753,"results":"19","hashOfConfig":"17"},{"size":1075,"mtime":1611064145223,"results":"20","hashOfConfig":"17"},{"size":2208,"mtime":1611248678649,"results":"21","hashOfConfig":"17"},{"size":163,"mtime":1609928182255,"results":"22","hashOfConfig":"17"},{"size":296,"mtime":1608983076780,"results":"23","hashOfConfig":"17"},{"size":83,"mtime":1609179554987,"results":"24","hashOfConfig":"17"},{"size":2557,"mtime":1611248665400,"results":"25","hashOfConfig":"17"},{"size":87,"mtime":1608983079885,"results":"26","hashOfConfig":"17"},{"size":75,"mtime":1609738927947,"results":"27","hashOfConfig":"17"},{"size":1469,"mtime":1611237117700,"results":"28","hashOfConfig":"17"},{"size":1548,"mtime":1611235207233,"results":"29","hashOfConfig":"17"},{"size":95,"mtime":1609762154107,"results":"30","hashOfConfig":"17"},{"size":995,"mtime":1611237164926,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1a7igb4",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"D:\\animation\\my-app\\my-app\\src\\index.js",[],["66","67"],"D:\\animation\\my-app\\my-app\\src\\reducers\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\app\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\reducers\\task.js",[],"D:\\animation\\my-app\\my-app\\src\\reducers\\microtask.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\app\\App.js",[],"D:\\animation\\my-app\\my-app\\src\\constants\\actions.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\border\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\border\\Border.js",["68","69"],"D:\\animation\\my-app\\my-app\\src\\components\\addtask\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\task\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\addtask\\Addtask.js",["70","71"],"\nimport React,{useState,useRef} from 'react'\n\nimport addSvg from \"../../images/addBtnTask.svg\";\n\nimport clearSvg from \"../../images/clear.svg\";\n\nexport const Addtask = ({getAction,textPlaceholder})=>{\n\nconst [inputBlock,setInputBlock] = useState(false)\nconst refEl =  useRef(null)\n\n\nconst hideShowStartTask = (value)=>{\n    setInputBlock(value)\n}\n\nconst exuteAction = ()=>{\n\n    getAction(refEl.current.value)\n\n    refEl.current.value=\"\";\n\n    hideShowStartTask(false)\n}\n\n   return (\n   <div className=\"addtask\">\n\n        {\n            !inputBlock && (\n            <div className=\"addtask-FirstBtn\" onClick={hideShowStartTask.bind(null,true)}><img className=\"addtask-FirstBtn__addSvg-img\" src={addSvg}></img><span>Добавить еще одну карточку</span></div>\n            )\n        }\n        {\n            inputBlock && (\n            <div className=\"taskInput\">\n                <p><textarea ref={refEl} className=\"taskInput__TextArea\" placeholder={textPlaceholder}></textarea></p>\n                <div className=\"taskInput-btnsarea\">\n                        <div  className=\"taskInput-btnsarea__btn-add\" onClick={exuteAction}>Добавить карточку</div>\n                        <div className=\"taskInput-btnsarea__btn-X\" onClick={hideShowStartTask.bind(null,false)}><img className=\"taskInput-btnsarea__bottom-clear\" src={clearSvg}></img></div>      \n                </div>\n            </div>)\n            \n        }\n   \n    </div>);\n    \n}\n","D:\\animation\\my-app\\my-app\\src\\components\\task\\Task.js",["72"],"\nimport React from 'react'\nimport {useSelector,useDispatch} from 'react-redux'\nimport {ADD_MICRO_TASK,DELETE_TASK} from '../../constants/actions'\nimport {nanoid} from 'nanoid'\nimport Microtask from '../microtask'\nimport  Addtask  from \"../addtask\";\n\nimport clearSvg from \"../../images/clear.svg\";\n\nexport const Task = ({id_task,provided})=>{\nconst dispath = useDispatch()\nconst data_obj = useSelector((state)=>(state.task.tasks_obj[id_task]))\nconst tasks_arr = useSelector((state)=>(Object.values(state.microtask.tasks_obj).filter((task)=>(task.id_task===id_task))))\n\nconst addMicroTaskHandler = (actionType,value)=>{\n  value = value.trim()\n  if (value===\"\" || actionType.trim()===\"\"){return}\n  dispath({type:actionType,payload:{text:value,id:nanoid(),id_task:id_task}})\n}\nconst handDelTask = ()=>{\n  dispath({type:DELETE_TASK,payload:id_task})\n}\n\nreturn (<div className=\"task\">\n        <div className=\"task-header\">\n          \n          <b className=\"task-header__captionTask\">{data_obj.caption}</b>\n          <div className=\"task-header__btnClose\" onClick={handDelTask} ><img src={clearSvg}></img></div>\n        </div>\n        <div className=\"task-microtasks\">\n              {tasks_arr.map(({id,text,id_task},index)=>{\n                return(<Microtask id={id} text={text} key={String(id)} index={index}/>)\n              })}\n        {provided.placeholder}\n        </div>\n        \n        <Addtask getAction={addMicroTaskHandler.bind(null,ADD_MICRO_TASK)} textPlaceholder={\"Введите текст  микрозадача\"}/>\n        </div>);\n}\n","D:\\animation\\my-app\\my-app\\src\\components\\microtask\\index.js",[],"D:\\animation\\my-app\\my-app\\src\\components\\microtask\\Microtask.js",["73"],"\nimport React from \"react\"\nimport {DELETE_MICRO_TASK} from \"../../constants/actions\"\nimport {useDispatch} from 'react-redux'\nimport { Draggable } from 'react-beautiful-dnd';\nimport clearSvg from \"../../images/clear.svg\";\nexport const Microtask = ({id,text,index})=>{\n  const dispath = useDispatch()\n  const handDelMicroTask = ()=>{\n    dispath({type:DELETE_MICRO_TASK,payload:id})\n  }\n  \n   return (\n  <Draggable\n          key={id}\n          draggableId={ String(id) }\n          index={index}>\n            {\n              (provided ) => (\n          <div className=\"microtask\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            >\n              <div className=\"microtask__text\">{text}</div>\n              <div className=\"microtask__btnClose\" onClick={handDelMicroTask} ><img className=\"microtask__btnClose-svg\" src={clearSvg}></img></div>\n          </div>\n              )\n              }\n  </Draggable>\n    );\n    \n}\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":26,"column":9,"nodeType":"80","messageId":"81","endLine":26,"endColumn":16},{"ruleId":"78","severity":1,"message":"82","line":37,"column":7,"nodeType":"80","messageId":"81","endLine":37,"endColumn":11},{"ruleId":"83","severity":1,"message":"84","line":32,"column":91,"nodeType":"85","endLine":32,"endColumn":150},{"ruleId":"83","severity":1,"message":"84","line":41,"column":113,"nodeType":"85","endLine":41,"endColumn":178},{"ruleId":"83","severity":1,"message":"84","line":29,"column":73,"nodeType":"85","endLine":29,"endColumn":93},{"ruleId":"83","severity":1,"message":"84","line":26,"column":80,"nodeType":"85","endLine":26,"endColumn":136},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'reorder' is assigned a value but never used.","Identifier","unusedVar","'move' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]